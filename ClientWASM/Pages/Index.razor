@page "/"
@using global::Shared.Models;
@inject HttpClient httpClient

<PageTitle>Index</PageTitle>

<MudFileUpload T="IBrowserFile" OnFilesChanged="UploadFile">
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   Disabled=@(isCholeskySolving || isGaussSolving)
                   for="@context">
            Upload File
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>

<p></p>

@if (currentFile is not null)
{
    <p class="mt-2">
        <b>Cholesky result: </b> 
        @if (isCholeskySolving)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
        }
        else
        {
            @choleskyResult
        }
        <br>
        <b>Gauss result: </b>
        @if (isGaussSolving)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
        }
        else
        {
            @gaussResult
        }
    </p>
}

@code {
    private string? choleskyResult;
    private string? gaussResult;
    private IBrowserFile? currentFile;
    private bool isCholeskySolving;
    private bool isGaussSolving;

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        if (e.File.ContentType != "text/xml")
        {
            return;
        }

        currentFile = e.File;

        isCholeskySolving = true;

        using (var content = new MultipartFormDataContent())
        {
            var contentType = e.File.ContentType;
            content.Add(new StreamContent(e.File.OpenReadStream()), "file", e.File.Name);

            var response = await httpClient.PostAsync("linear-system/solve/cholesky", content);

            if (response.IsSuccessStatusCode)
            {
                choleskyResult = await response.Content.ReadAsStringAsync();
            }
        }

        isCholeskySolving = false;
        isGaussSolving = true;
        StateHasChanged();

        using (var content = new MultipartFormDataContent())
        {
            var contentType = e.File.ContentType;
            content.Add(new StreamContent(e.File.OpenReadStream()), "file", e.File.Name);

            var response = await httpClient.PostAsync("linear-system/solve/gauss", content);

            if (response.IsSuccessStatusCode)
            {
                gaussResult = await response.Content.ReadAsStringAsync();
            }
        }

        isGaussSolving = false;
        StateHasChanged();
    }
}